<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[思维导图（更新中...）]]></title>
    <url>%2F2019%2F05%2F17%2F%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD-%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Java常用关键字：（建议将图片保存到本地查看）]]></content>
      <tags>
        <tag>知识点总结</tag>
        <tag>思维导图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML简介及标签]]></title>
    <url>%2F2019%2F05%2F16%2FHTML%E7%AE%80%E4%BB%8B%E5%8F%8A%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[一、HTML简介1）HTML简介HTML是⽤于创建⽹⻚的语⾔。我们通过使⽤HTML标记标签创建html⽂档来创建⽹⻚。 HTML代表超⽂本标记语⾔。 HTML是⼀种标记语⾔，它具有标记标签的集合。HTML标签是由尖括号括起来的词，如 ， 。标签通常成对出现，例如 和 。⼀对中的第⼀个标签是开始标签;第⼆个标签是结束标签。在上⾯的示例中， 是开始标签，⽽是结束标签。我们还可以将开始标签称为起始标签，结束标签称为闭合标签 。 2）HTML结构HTML文件的结构如下： 1234&lt;html&gt; &lt;head&gt;...&lt;/head&gt; &lt;body&gt;...&lt;/body&gt;&lt;/html&gt; 在以上代码中： 1.&lt; html &gt;&lt; /html &gt;称为根标签，所有的网页标签都在&lt; html &gt;&lt; /html &gt;中。 2.&lt; head &gt;&lt; /head&gt;标签用于定义文档的头部，它是所有头部元素的容器。 3.&lt; body &gt;和&lt; /body &gt;标签之间的内容是网页的主要内容，如&lt; h1 &gt;,&lt; p &gt;,&lt; a &gt;,&lt; img &gt;等网页内容标签，在这里的标签的内容会在浏览器中显示出来。 二、HTML标签1）&lt;!DOCTYPE&gt;——HTML 文档类型不是 HTML标签，为浏览器提供一种信息（声明），声明HTML版本，以便浏览器正确显示HTML页面。必须放在HTML文档第一行。 如，HTML5声明为： 1&lt;!DOCTYPE html&gt; 2）head头部标签123456789101112&lt;head&gt; &lt;!--HTML注释方法--&gt; &lt;title&gt;...&lt;/title&gt; &lt;meta&gt;&lt;!--若网页出现乱码，则需在head标签之间使用&lt;meat charset="utf-8"&gt;--&gt; &lt;link&gt; &lt;style&gt;...&lt;/style&gt; &lt;script&gt;...&lt;/script&gt;&lt;/head&gt; 3）body文本标签3.1 段落标签&lt; p &gt;1234567&lt;p&gt;段落1&lt;p&gt;&lt;p&gt;段落2&lt;p&gt;&lt;p&gt;段落3&lt;p&gt;&lt;!--1.浏览器会自动在段落的前后添加空行（&lt;p&gt;是块级元素，且必须有结束标签）--&gt; 3.2 标题标签&lt; hx &gt;12345678&lt;h1&gt;标题&lt;/h1&gt;&lt;h2&gt;标题&lt;/h2&gt; ...&lt;h6&gt;标题&lt;/h6&gt; &lt;!--1.&lt;h1&gt;为最大的标题，&lt;h6&gt;为最小的标题2.浏览器会自动在标题的前后添加空行（默认情况下，浏览器会自动在块级元素前后添加一个额外的空行，比如段落，标题元素前后）--&gt; 3.3 强调标签 &lt; em &gt;,&lt; strong &gt;12345678&lt;em&gt;em标签1&lt;/em&gt;&lt;strong&gt;strong标签2&lt;/strong&gt;&lt;!--1.&lt;em&gt;表示强调，&lt;strong&gt;表示更强烈的强调在浏览器中，&lt;em&gt;用斜体表示，&lt;strong&gt;用粗体表示。2.&lt;em&gt;和&lt;strong&gt;标签是强调一段话中的关键字时使用，它们的语义是强调。3.&lt;span&gt;标签是没有语义的，它是为了设置单独样式用的，把一段话圈起来，然后用CSS设置样式。--&gt; 3.4 引用标签&lt; q &gt;,&lt; blockquote &gt;1234567&lt;q&gt;短引用文本&lt;/q&gt;&lt;blockquote&gt;长引用文本&lt;/blockquote&gt;&lt;!--1.要引用的文本不用加双引号，浏览器会对引用标签里的内容自动添加双引号。2.引用标签的真正意义在于：引用别人的话。3.浏览器对&lt;blockquote&gt;标签的解析是缩进样式。--&gt; 3.5 换行标签&lt; br/&gt;123456&lt;p&gt; 第一行&lt;br/&gt;第二行&lt;br/&gt;第三行&lt;br/&gt;&lt;/p&gt;&lt;!--1.使用&lt;br&gt;换行也不会出错，但建议使用&lt;br/&gt;--&gt; 3.6 分割线标签&lt; hr/ &gt;1234567&lt;p&gt; 第一行&lt;br/&gt;&lt;hr&gt;第二行,两行之间以分割线隔开&lt;/p&gt;&lt;!--1.&lt;hr/&gt;标签在浏览器中默认样式为灰色较粗的一根线条。2.&lt;br/&gt;与&lt;hr/&gt;标签都是空标签，所以只有开始标签，无结束标签。--&gt;]]></content>
      <tags>
        <tag>前端</tag>
        <tag>知识点总结</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java常用关键字]]></title>
    <url>%2F2019%2F05%2F15%2FJava%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[Java中常用的关键字有以下分类：访问控制private protected public 类,方法和变量修饰符abstract class extends final implements interface native newstatic strictfp synchronized transient volatile 程序控制break continue return do while if else for instanceof switch case default 异常处理try cathc throw throws 包相关import package 基本类型boolean byte char double float int long short null true false 变量引用super this void保留字goto const 详细解释：1. 访问控制1) private 私有的private 关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。 只能在声明 private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。 所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 2) protected 受保护的protected 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。可以在声明 protected 类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 3) public 公共的public 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。 可能只会在其他任何类或包中引用 public 类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 4）总结 自身 同包子类 不同包子类 同包类 其他类 public 可访问 可继承 可继承 可访问 可访问 protected 可访问 可继承 可继承 可访问 不可访问 private 可访问 不可继承 不可继承 不可访问 不可访问 defaule(不写) 可访问 可继承 不可继承 可访问 不可访问 2. 类、方法和变量修饰符1) abstract 声明抽象abstract关键字可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用 abstract方法的类本来就是抽象类，并且必须声明为abstract。 2) class类class 关键字用来声明新的 Java 类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用 new 操作符将类的对象实例化，然后调用类的方法来访问类的功能。 3) extends 继承、扩展extends 关键字用在 class 或 interface 声中，用于指示所声明的类或接口是其名称后跟有 extends 关键字的类或接口的子类。子类继承父类的所有 public 和 protected 变量和方法。 子类可以重写父类的任何非 final 方法。一个类只能扩展一个其他类。 4) final 最终、不可改变final 关键字可以应用于类，以指示不能扩展该类（不能有子类）。final 关键字可以应用于方法，以指示在子类中不能重写此方法。一个类不能同时是 abstract 又是 final。abstract 意味着必须扩展类，final 意味着不能扩展类。一个方法不能同时是 abstract 又是 final。abstract 意味着必须重写方法，final 意味着不能重写方法。 5) implements实现implements 关键字在 class 声明中使用，以指示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。 6) interface 接口interface 关键字用来声明新的 Java 接口，接口是方法的集合。 接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。 实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。 7) native 本地native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。 8) new 新,创建new 关键字用于创建类的新实例。 new 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。 参数集合必须与类的构造方法的签名匹配。 = 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。 9) static 静态static 关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。 通常，static 关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。 static（内部）类可以被其他类实例化和引用（即使它是顶级类）。 static 字段（类的成员变量）在类的所有实例中只存在一次。 可以从类的外部调用 static 方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。 模式：public final static varName = ; 通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。 10) strictfp 严格,精准strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。 可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字 11) synchronized线程、同步synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 synchronized 关键字可防止代码的关键代码段一次被多个线程执行。 如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。 如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。 如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。 12) instanceof 实例instanceof 关键字用来确定对象所属的类。 13) transient 短暂transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。 当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。 Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。​ transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。 14) volatile 易失volatile 关键字用于表示可以被多个线程异步修改的成员变量。 注意：volatile 关键字在许多 Java 虚拟机中都没有实现。 volatile 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。 Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。 3. 程序控制语句1) break 跳出，中断break 关键字用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。 break 总是退出最深层的 while、for、do 或 switch 语句。 2) continue 继续continue 关键字用来跳转到 for、while 或 do 循环的下一个迭代。 continue 总是跳到最深层 while、for 或 do 语句的下一个迭代。 3) return 返回return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。 如果方法具有非 void 的返回类型，return 语句必须具有相同或兼容类型的参数。 4) do 运行do 关键字用于指定一个在每次迭代结束时检查其条件的循环。 do 循环体至少执行一次。 条件表达式后面必须有分号。 5) while 循环while 关键字用于指定一个只要条件为真就会重复的循环。 6) if 如果if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。 if 语句可以有可选的 else 子句，该子句包含条件为 false 时将执行的代码。 包含 boolean 操作数的表达式只能包含 boolean 操作数。 7) else 否则else 关键字总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。 8) for 循环for 关键字用于指定一个在每次迭代结束前检查其条件的循环。 for 语句的形式为 for(initialize; condition; increment) 控件流进入 for 语句时，将执行一次 initialize 语句。 每次执行循环体之前将计算 condition 的结果。如果 condition 为 true，则执行循环体。 每次执行循环体之后，在计算下一个迭代的 condition 之前，将执行 increment 语句。 9) switch 观察switch 语句用于基于某个表达式选择执行多个代码块中的某一个。 switch 条件的计算结果必须等于 byte、char、short 或 int。 如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。 10) case 返回观察里的结果case 用来标记 switch 语句中的每个分支。 case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。 如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。 11) default 默认default 关键字用来标记 switch 语句中的默认分支。 default 块没有隐式结束点。break 语句通常在每个 case 或 default 块的末尾使用，以便在完成块时退出 switch 语句。 如果没有 default 语句，其参数与任何 case 块都不匹配的 switch 语句将不执行任何操作。 4. 错误处理1) try 捕获异常try 关键字用于包含可能引发异常的语句块。 每个 try 块都必须至少有一个 catch 或 finally 子句。 如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。 2) catch 处理异常catch 关键字用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。 开始和结束标记 { 和 } 是 catch 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。 每个 try 块都必须至少有一个 catch 或 finally 子句。 如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。 3) throw 抛出一个异常对象throw 关键字用于引发异常。 throw 语句将 java.lang.Throwable 作为参数。Throwable 在调用栈中向上传播，直到被适当的 catch 块捕获。 4) throws 声明一个异常可能被抛出throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。 throws 关键字将逗号分隔的 java.lang.Throwables 列表作为参数。 引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。 要在 try-catch 块中包含带 throws 子句的方法的调用，必须提供该方法的调用者。 5) finally异常处理补充不管有无异常发生，finally块中的代码总会执行 5. 包相关1) import 引入import 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。 当多个包包含同名的类时，许多 Java 程序员只使用特定的 import 语句（没有“*”）来避免不确定性。 2) package 包package 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。 package 语句（如果出现）必须是 Java 源文件中的第一个非注释性文本。 例:java.lang.Object。 如果 Java 源文件不包含 package 语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。 6. 基本类型1) boolean 布尔型boolean 是 Java 原始类型。boolean 变量的值可以是 true 或 false。 boolean 变量只能以 true 或 false 作为值。boolean 不能与数字类型相互转换。 包含 boolean 操作数的表达式只能包含 boolean 操作数。 Boolean 类是 boolean 原始类型的包装对象类。 2) byte 字节型byte 是 Java 原始类型。byte 可存储在 [-128, 127] 范围以内的整数值。 Byte 类是 byte 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。 3) char 字符型char 是 Java 原始类型。char 变量可以存储一个 Unicode 字符。 可以使用下列 char 常量：\b - 空格, \f - 换页, \n - 换行, \r - 回车, \t - 水平制表符, \’ - 单引号, \” - 双引号, \ - 反斜杠, \xxx - 采用 xxx 编码的 Latin-1 字符。\x 和 \xx 均为合法形式，但可能引起混淆。 \uxxxx - 采用十六进制编码 xxxx 的 Unicode 字符。 Character 类包含一些可用来处理 char 变量的 static 方法，这些方法包括 isDigit()、isLetter()、isWhitespace() 和 toUpperCase()。 char 值没有符号。 4) double 双精度double 是 Java 原始类型。double 变量可以存储双精度浮点值。 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 Java 浮点数值可代表无穷大和 NaN（非数值）。Double 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。 5) float 浮点float 是 Java 原始类型。float 变量可以存储单精度浮点值。 使用此关键字时应遵循下列规则： Java 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 f 或 F，如 0.01f。 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 Java 浮点数值可代表无穷大和 NaN（非数值）。Float 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。 6) int 整型int 是 Java 原始类型。int 变量可以存储 32 位的整数值。 Integer 类是 int 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。 7) long 长整型long 是 Java 原始类型。long 变量可以存储 64 位的带符号整数。 Long 类是 long 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。 8) short 短整型short 是 Java 原始类型。short 变量可以存储 16 位带符号的整数。 Short 类是 short 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。 9) null 空null 是 Java 的保留字，表示无值。 将 null 赋给非原始变量相当于释放该变量先前所引用的对象。 不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。 10) true 真true 关键字表示 boolean 变量的两个合法值中的一个。 11) false 假false 关键字代表 boolean 变量的两个合法值之一。 7. 变量引用1) super 父类,超类super 关键字用于引用使用该关键字的类的超类。 作为独立语句出现的 super 表示调用超类的构造方法。 super.&lt; methodName &gt;() 表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。 2) this 本类this 关键字用于引用当前实例。 当引用可能不明确时，可以使用 this 关键字来引用当前的实例。 3) void 无返回值void 关键字表示 null 类型。 void 可以用作方法的返回类型，以指示该方法不返回值。 8. 保留字正确识别java语言的关键字（keyword）和保留字（reserved word）是十分重要的。Java的关键字对java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等。保留字是为java预留的关键字，他们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。 识别java语言的关键字，不要和其他语言如c/c++的关键字混淆。const和goto是java的保留字。 所有的关键字都是小写 1) goto 跳转goto 保留关键字，但无任何作用。结构化程序设计完全不需要 goto 语句即可完成各种流程，而 goto 语句的使用往往会使程序的可读性降低，所以 Java 不允许 goto 跳转。 2) const 静态const 保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。 3) native 本地 Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。 可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤： １、在Java中声明native()方法，然后编译； ２、用javah产生一个.h文件； ３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）； ４、将第三步的.cpp文件编译成动态链接库文件； ５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。 思维导图关于这部分的思维导图（建议将图片保存到本地查看）：]]></content>
      <tags>
        <tag>知识点总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java类和对象简介]]></title>
    <url>%2F2019%2F05%2F14%2FJava%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[类：一种共性的概念 对象：一个具体的，可以使用的事物 类相当于是一种新的数据类型，这个数据类型的实例就是相应的对象。 类组成：属性/字段/数据成员（变量：描述每个对象的具体特点） 方法/成员函数（操作的行为） 定义一个类的语法： 1234567891011121314151617181920/*class 类名称&#123; 属性1； 属性2； 方法1（）&#123;&#125; 方法2（）&#123;&#125;&#125;*/如：class Person&#123; String name; int age; public void eat()&#123; System.out.println("Person can eat"); &#125; public void run()&#123; System.out.println("Person can run"); &#125;&#125; 对象首先产生类（类是生产对象的蓝图），之后才能产生对象，对象的所有行为，一定在类中进行了完整的定义。 产生对象的语法： 123//类名称 对象名称 = new 类名称();//如：Person lihua = new Person(); 只要出现了关键字new,就开辟了内存 通过对象调用类中实例变量与实例方法： 1234//对象名称.属性名称/方法名称//如:lihua.name;lihua.rat();]]></content>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2F2019%2F05%2F14%2F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[面向对象三大特性：封装，继承，多态]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java数据类型]]></title>
    <url>%2F2019%2F05%2F13%2FJava%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[Java数据类型分为基本数据类型和引用数据类型：基本数据类型：数值型整型(默认值为0)：byte，short,int,long浮点型(默认值为0.0)：double，float字符型(默认值为‘\u0000’)：char布尔型(默认值为false)：boolean引用数据类型(默认值为null)：数组类接口基本数据类型总结在这里创建了一个汇总表： 说明 大的数据类型转换为小的数据类型时，必须强转，但有时会丢失内容 数据默认值在主方法中无效，各个数据类型的默认值的使用，必须结合类才能观察到 字符型数字（‘0’~‘9’）与int数字（0~9）不同，即 if(‘0’==0)结果为false. 描述整数一般用int,描述小数一般用double long一般用于描述日期，时间，内存或文件大小 byte一般用于编码转换或进行二进制流的操作 char一般在描述中文时用到 基本类型具有包装器的，使得可以在堆中创建一个非基本对象，用来表示对应的基本类型，例如： 1234char c = &apos;x&apos;;Character ch = new Character(c);也可以这样用：Character ch = new Character(&apos;x&apos;);JDK1.5的自动包装功能可自动将基本类型转换为包装器类型： JDK1.5的自动包装功能可自动将基本类型转换为包装器类型： 123Character ch = 'x';//并可以反向转换：char c = ch;]]></content>
      <tags>
        <tag>知识点总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA对象存储及内存分配]]></title>
    <url>%2F2019%2F05%2F13%2FJAVA%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%8F%8A%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%2F</url>
    <content type="text"><![CDATA[程序运行时，对象如何进行放置安排？内存如何进行分配？ 有五个不同的地方可以存储数据： 寄存器最快的存储区，因为它位于不同于其他存储器的地方：处理器内部。但是寄存器的数量极其有限，所以寄存器需要根据需求分配，不能直接控制，也无法在程序中感受到寄存器存在的任何迹象。（C和C++允许向编译器建议寄存器的分配方式）。 堆栈位于通用ARM（随机访问存储器）中，但通过堆栈指针可以从处理器那里获得直接支持。堆栈指针向下移动，则分配新的内存，若向上移动，则释放这些内存。这是一种快速有效的分配存储方法，仅次于寄存器。创建对象时，Java系统必须知道存储在堆栈中所有项的确切生命周期，以便上下移动堆栈指针。这一约束限制了程序的灵活性，所以虽然某些Java数据存储于堆栈中——特别是对象引用，但是Java对象并不存储于其中。 堆一种通用的内存池（也位于ARM区），用于存放所有的Java对象。堆不同于堆栈的好处是：编译器不需要知道存储的数据在堆里存活多长时间。因此在堆里分配内存有很大的灵活性。当需要一个对象时，只需要用new写一行简单的代码，当执行这行代码时，会自动在堆里进行存储分配。当然，这种灵活性必须付出相应的代价：用堆进行存储分配和清理可能比用堆栈进行存储分配需要更多的时间（如果确实可以在Java中像在C++中一样在栈中创建对象）。 常量存储常量值通常直接存放在程序代码内部，这样做是安全的，因为它们永远不会被改变。有时，在嵌入式系统中，常量本身会和其他部分隔离开，所以在这种情况下，可以选择将其存放在ROM（只读存储器）中。 （ROM存储区的一个例子是字符串池，所有字面常量字符串和具有字符串值的常量表达式都自动是内存限定的，并且会置于特殊的静态存储区中）如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。其中两个基本的例子是“流对象”和“持久化对象”。在“流对象”中，对象转化成字节流，通常被发送给另一台机器。在“持久化对象”中，对象被存放于磁盘上，因此即使程序终止，它们仍然可以保持自己的状态。这种存储方式的技巧在于：把对象转化可以存放在其他媒介上的事物，在需要时，可恢复成常规的，基于ARM的对象。 非ARM存储如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。其中两个基本的例子是“流对象”和“持久化对象”。在“流对象”中，对象转化成字节流，通常被发送给另一台机器。在“持久化对象”中，对象被存放于磁盘上，因此即使程序终止，它们仍然可以保持自己的状态。这种存储方式的技巧在于：把对象转化可以存放在其他媒介上的事物，在需要时，可恢复成常规的，基于ARM的对象。]]></content>
      <tags>
        <tag>知识点总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
